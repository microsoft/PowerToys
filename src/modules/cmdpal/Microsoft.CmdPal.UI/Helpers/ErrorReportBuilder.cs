// Copyright (c) Microsoft Corporation
// The Microsoft Corporation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Globalization;
using System.Security.Principal;

using Windows.ApplicationModel;

namespace Microsoft.CmdPal.UI.Helpers;

internal sealed class ErrorReportBuilder
{
    private readonly ErrorReportSanitizer _sanitizer = new();

    private const string Preamble = """
                                    This is an error report generated by Windows Command Palette.
                                    If you are seeing this, it means something went a little sideways in the app.
                                    You can help us fix it by filing a report at https://aka.ms/powerToysReportBug.

                                    (While you’re at it, give the details below a quick skim — just to make sure there’s nothing personal you’d prefer not to share. It’s rare, but sometimes little surprises sneak in.)
                                    """;

    internal string BuildReport(Exception exception, string context, bool scrub)
    {
        var sanitizedMessage = scrub ? _sanitizer.Sanitize(exception.Message) : exception.Message;
        var sanitizedToString = scrub ? _sanitizer.Sanitize(exception.ToString()) : exception.ToString();

        var message =
               $"""
                ============================================================
                Summary:
                  Message:         {sanitizedMessage}
                  Type:            {exception.GetType()}
                  Source:          {exception.Source}
                  HRESULT:         {exception.HResult}
                  Time:            {DateTime.Now:s}
                  Context:         {context}

                Environment:
                  OS Version:      {Environment.OSVersion.VersionString}
                  CLR Version:     {Environment.Version}
                  Is 64-bit OS:    {Environment.Is64BitOperatingSystem}
                  IntPtr Size:     {IntPtr.Size * 8}-bit
                  Culture:         {CultureInfo.CurrentCulture.Name}
                  UI Culture:      {CultureInfo.CurrentUICulture.Name}
                  App Version:     {GetAppVersionSafe()}
                  Is Elevated:     {GetElevationStatus()}

                Stack Trace:
                {exception.StackTrace}

                ------------------ Full Exception Details ------------------
                {sanitizedToString}

                ============================================================
                """;

        return $"""
                {Preamble}
                {message}
                """;
    }

    private static string GetElevationStatus()
    {
        try
        {
            var isElevated = new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
            return isElevated ? "yes" : "no";
        }
        catch (Exception)
        {
            return "Failed to determine elevation status";
        }
    }

    private static string GetAppVersionSafe()
    {
        try
        {
            var version = Package.Current.Id.Version;
            return $"{version.Major}.{version.Minor}.{version.Build}.{version.Revision}";
        }
        catch (Exception)
        {
            return "Failed to retrieve app version";
        }
    }
}
