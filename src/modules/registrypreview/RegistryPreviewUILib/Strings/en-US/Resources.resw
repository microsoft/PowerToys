<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EditButton.Label" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="ErrorDialogTitle" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="FileEditorError" xml:space="preserve">
    <value>The REG file editor could not be opened.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File was not found</value>
  </data>
  <data name="FileSaveError" xml:space="preserve">
    <value>The REG file cannot be written to.</value>
  </data>
  <data name="FilterAllFiles" xml:space="preserve">
    <value>All files (*.*)</value>
  </data>
  <data name="FilterRegistryName" xml:space="preserve">
    <value>Registry files (*.reg)</value>
  </data>
  <data name="InvalidBinary" xml:space="preserve">
    <value>(Invalid binary value)</value>
  </data>
  <data name="InvalidDword" xml:space="preserve">
    <value>(Invalid DWORD (32-bit) value)</value>
  </data>
  <data name="InvalidQword" xml:space="preserve">
    <value>(Invalid QWORD (64-bit) value)</value>
  </data>
  <data name="InvalidRegistryFile" xml:space="preserve">
    <value> appears to be an invalid registry file.</value>
  </data>
  <data name="InvalidRegistryFileTitle" xml:space="preserve">
    <value>File was not a Registry file</value>
  </data>
  <data name="InvalidString" xml:space="preserve">
    <value>(Invalid string value)</value>
  </data>
  <data name="LargeRegistryFile" xml:space="preserve">
    <value> is larger than 10MB which is too large for this application.</value>
  </data>
  <data name="LargeRegistryFileTitle" xml:space="preserve">
    <value>File is too large</value>
  </data>
  <data name="NameColumn.Header" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NoNodesFoundInFile" xml:space="preserve">
    <value>No valid Keys were found</value>
  </data>
  <data name="OkButtonText" xml:space="preserve">
    <value>OK</value>
    <comment>as on the OK button</comment>
  </data>
  <data name="OpenButton.Label" xml:space="preserve">
    <value>Open…</value>
  </data>
  <data name="OpenDialogTitle" xml:space="preserve">
    <value>Open Registry file</value>
  </data>
  <data name="RefreshButton.Label" xml:space="preserve">
    <value>Reload</value>
  </data>
  <data name="RegistryButton.Label" xml:space="preserve">
    <value>Open Registry Editor</value>
  </data>
  <data name="RegistryJumpToKeyButton.Label" xml:space="preserve">
    <value>Open Key</value>
  </data>
  <data name="SaveDialogTitle" xml:space="preserve">
    <value>Save As</value>
  </data>
  <data name="SaveAsButton.Label" xml:space="preserve">
    <value>Save as…</value>
  </data>
  <data name="SaveButton.Label" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SuggestFileName" xml:space="preserve">
    <value>New Registry file</value>
  </data>
  <data name="titleBarText.ApplicationTitle" xml:space="preserve">
    <value>Registry Preview</value>
  </data>
  <data name="ToolTipAddedKey" xml:space="preserve">
    <value>Key will be added, if needed</value>
  </data>
  <data name="ToolTipBinaryValue" xml:space="preserve">
    <value>Binary value will be updated</value>
  </data>
  <data name="ToolTipDeletedKey" xml:space="preserve">
    <value>Key will be deleted</value>
  </data>
  <data name="ToolTipDeletedValue" xml:space="preserve">
    <value>Value will be deleted</value>
  </data>
  <data name="ToolTipErrorKey" xml:space="preserve">
    <value>Key couldn't be parsed</value>
  </data>
  <data name="ToolTipErrorValue" xml:space="preserve">
    <value>Value has a syntax error</value>
  </data>
  <data name="ToolTipStringValue" xml:space="preserve">
    <value>String value will be updated</value>
  </data>
  <data name="TypeColumn.Header" xml:space="preserve">
    <value>Type</value>
    <comment>noun, as in "a type of..."</comment>
  </data>
  <data name="UACDialogError" xml:space="preserve">
    <value>Click Yes on the User Account Control dialog to run the application.</value>
  </data>
  <data name="UACDialogTitle" xml:space="preserve">
    <value>User Account Control</value>
  </data>
  <data name="ValueColumn.Header" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="WriteButton.Label" xml:space="preserve">
    <value>Write to Registry</value>
  </data>
  <data name="YesNoCancelDialogCloseButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="YesNoCancelDialogContent" xml:space="preserve">
    <value>Save changes?</value>
  </data>
  <data name="YesNoCancelDialogPrimaryButtonText" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="YesNoCancelDialogSecondaryButtonText" xml:space="preserve">
    <value>Don't save</value>
  </data>
  <data name="YesNoCancelDialogTitle" xml:space="preserve">
    <value>Registry Preview</value>
  </data>
  <data name="ZeroLength" xml:space="preserve">
    <value>(zero-length binary value)</value>
  </data>
</root>